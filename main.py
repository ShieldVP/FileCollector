import telebot
from os import getcwd, mkdir, path
from shutil import rmtree
from file_collector import collect
from spec_logging import logger
from config import TOKEN


# Some global vars

# Connecting to telegram
bot = telebot.TeleBot(TOKEN)
# Small main keyboard
keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
keyboard.row("–ü—Ä–∏–≤–µ—Ç!", '–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?', "–†–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ...")
# Connects chat id with name of working directory and name of caught file
user_files = dict()
# Set of users who want to complain. Needed to keep in memory those users
# To write down their complains from next message
complaining_users = set()
# Names of types of documents. Will be shown after editing a message
document_types = {1: "–∞–∫—Ç", 2: "—Å—á—ë—Ç", 3: "—Å—á—ë—Ç-—Ñ–∞–∫—Ç—É—Ä—ã", 4: "–∞–∫—Ç –≤—ã–≤–µ—Ä–∫–∏"}


# File system functions

def safe_crete_directory(id):
    """
    –°–æ–∑–¥–∞—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –†–∞–∑—Ä–µ—à–∞—è –∫–æ–ª–ª–∏–∑–∏–∏ –≤ —Å–ª—É—á–∞–µ –∏—Ö –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è.
    """
    working_directory, counter = path.join(getcwd(), "cache", id), 0
    while True:
        try:
            mkdir(working_directory + str(counter))
        except:
            counter += 1
        else:
            working_directory += str(counter)
            return working_directory


def clean_up(id):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # If there are some files of user
        rmtree(user_files[id][0])
        user_files.pop(id)
    except:
        # If there is no file belongs to user
        pass


# Functions handling commands

@bot.message_handler(commands=['start'])
@logger
def start_command(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.
    """
    greeting(message.chat.id)


@bot.message_handler(commands=['help'])
@logger
def help_command(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–º–æ—â–∏.
    """
    help_message(message.chat.id)


@bot.message_handler(commands=['complain'])
@logger
def complain_command(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏–Ω—è—Ç–∏—è –∂–∞–ª–æ–±—ã.
    """
    complain(message.chat.id)


# Text handler function

@bot.message_handler(content_types=["text"])
@logger
def handle_text(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if message.text.lower() == "–∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?":
        help_message(message.chat.id)
    elif message.text.lower() == "–ø—Ä–∏–≤–µ—Ç!":
        greeting(message.chat.id)
    elif message.text.lower() == "—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ...":
        complain(message.chat.id)
    elif message.chat.id in complaining_users:
        get_complain(message)
    else:
        bot.send_message(
            message.chat.id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é üòû",
            reply_markup=keyboard
        )


# Standard answers

@logger
def greeting(chat_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.
    """
    bot.send_message(
        chat_id,
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ '
        '–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞, –∞–∫—Ç—ã –∏ —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ü–µ–ª—ã–π '
        '—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã–±–∏—Ä–µ—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —Å–∫–∞—á–∞–π—Ç–µ '
        '—Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü—Ä–∏—è—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã!',
        reply_markup=keyboard
    )


@logger
def help_message(chat_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏.
    """
    bot.send_message(
        chat_id,
        "–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –¥–∞–Ω–Ω—ã–π —á–∞—Ç —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf "
        "(–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ rtf –∫–∞–∫ pdf), –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ—è–≤–∏—Ç—Å—è –º–µ–Ω—é "
        "—Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –í—ã –≤—ã–±–µ—Ä–µ—Ç–µ, —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è,"
        " –∏ –í–∞–º –≤—ã—à–ª–µ—Ç—Å—è –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –£–¥–∞—á–∏!",
        reply_markup=keyboard
    )


@logger
def complain(chat_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∂–∞–ª–æ–±—É.
    """
    complaining_users.add(chat_id)
    bot.send_message(
        chat_id,
        "–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É. "
        "–°–ª–µ–¥—É—é—â–µ–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.",
        reply_markup=keyboard
    )


@logger
def get_complain(message):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∂–∞–ª–æ–±—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ complains.txt.
    """
    complaining_users.remove(message.chat.id)
    with open(path.join(getcwd(), "data", "complains.txt"), "a") as comp:
        comp.write(message.text + "\n\n")
    bot.send_message(
        message.chat.id,
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —Ä–∞–∑–∏—Ç–∏–∏ –±–æ—Ç–∞!",
        reply_markup=keyboard
    )


# Document handling

@bot.message_handler(content_types=["document"])
@logger
def handle_document(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.
    –ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ç–∏–ø–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    –ü—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç
    –ò –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    """
    # If user sent a new file while the previous one was processing
    clean_up(message.chat.id)

    # Receiving a document
    document_id = message.document.file_id
    document_name = message.document.file_name

    # TODO: Check if extension of caught document is bad.

    file_info = bot.get_file(document_id)
    downloaded_file = bot.download_file(file_info.file_path)

    # Solving collisions
    working_directory = safe_crete_directory(document_id)

    # Downloading a document file
    src = path.join(working_directory, document_name)
    with open(src, "wb") as file:
        file.write(downloaded_file)
    user_files[message.chat.id] = working_directory, document_name

    # Choosing a type of a document
    type_choosing(message.chat.id)


@logger
def type_choosing(chat_id):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    """
    keys = telebot.types.InlineKeyboardMarkup()
    but_1 = telebot.types.InlineKeyboardButton(text="–ê–∫—Ç", callback_data=1)
    but_2 = telebot.types.InlineKeyboardButton(text="–°—á—ë—Ç", callback_data=2)
    but_3 = telebot.types.InlineKeyboardButton(text="–°—á—ë—Ç-—Ñ–∞–∫—Ç—É—Ä—ã", callback_data=3)
    but_4 = telebot.types.InlineKeyboardButton(text="–ê–∫—Ç –≤—ã–≤–µ—Ä–∫–∏", callback_data=4)
    but_5 = telebot.types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="Back")
    keys.add(but_1, but_2, but_3, but_4, but_5)
    bot.send_message(
        chat_id,
        "–ö–∞–∫–æ–≥–æ —Ç–∏–ø–∞ —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?",
        reply_markup=keys
    )


@bot.callback_query_handler(func=lambda call: True)
@logger
def answer_type(call):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    """
    if call.data == "Back":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º.",
            reply_markup=None
        )
    else:
        # Handle a type of document
        type = int(call.data)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Ç–∏–ø–∞ {}.".format(document_types[type]),
            reply_markup=None
        )
        process_document(call.message.chat.id, type)
    # Collecting rubbish
    clean_up(call.message.chat.id)


@logger
def process_document(chat_id, type):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ —Ç–∏–ø–∞.
    """
    # Which files are we working with?
    working_directory, document_name = user_files[chat_id]

    # Processing document
    result_src, errors = collect(working_directory, document_name, type)

    # Sending a result archive
    if errors:
        find_errors = [str(error[1]) for error in errors if error[0] == 0]
        if find_errors:
            bot.send_message(
                chat_id,
                f"–í —Ö–æ–¥–µ —Ä–∞–±–æ—Ç—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π ‚Ññ {find_errors[0]}"
                " –æ–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç "
                "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–Ω—ã—Ö."
                if len(find_errors) == 1 else
                "–í —Ö–æ–¥–µ —Ä–∞–±–æ—Ç—ã –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ ‚Ññ " +
                ", ".join(find_errors) +
                " –æ–Ω–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç "
                "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–Ω—ã—Ö."
            )
        save_errors = [str(error[1]) for error in errors if error[0] == 1]
        if save_errors:
            bot.send_message(
                chat_id,
                "–í —Ö–æ–¥–µ —Ä–∞–±–æ—Ç—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π "
                f"‚Ññ {save_errors[0]} –æ–Ω–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–Ω—ã—Ö."
                if len(save_errors) == 1 else
                "–í —Ö–æ–¥–µ —Ä–∞–±–æ—Ç—ã –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ ‚Ññ " +
                ", ".join(save_errors) +
                " –æ–Ω–∏ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç "
                "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–∞–Ω–Ω—ã—Ö."
            )
    with open(result_src, 'rb') as result:
        bot.send_document(chat_id, result)


# Program loop

if __name__ == "__main__":
    bot.polling(none_stop=True)
